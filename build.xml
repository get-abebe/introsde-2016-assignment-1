<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="compile" name="getachew_abebe-assignment01" xmlns:ivy="antlib:org.apache.ivy.ant">
    
	<!-- PART 1: Ivy properties, download, installation and configuration -->
		<property name="ivy.install.version" value="2.4.0-rc1" />
		<property name="ivy.jar.dir" value="${basedir}/ivy" />
		<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

		<!-- this targe will donwload ivy.jar if its inot in the "ivy" folder yet -->
		<target name="download-ivy" unless="skip.download">
			<mkdir dir="${ivy.jar.dir}"/>
			<!-- download Ivy from web site so that it can be used even without any special installation -->
			<echo message="installing ivy..."/>
			<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
		</target>

		<!--
				 ================================= 
				          target: install-ivy         
				            this target is not necessary if you put ivy.jar in your ant lib directory
				            if you already have ivy in your ant lib, you can simply remove this
				            target and the dependency the 'init' target has on it
				         ================================= 
				-->
		<target name="install-ivy" depends="download-ivy" description="--> install ivy">
			<!--
				 try to load ivy here from local ivy dir, in case the user has not already dropped
				              it into ant's lib dir (note that the latter copy will always take precedence).
				              We will not fail as long as local lib dir exists (it may be empty) and
				              ivy is in at least one of ant's lib dir or the local lib dir. 
				-->
			<path id="ivy.lib.path">
				<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
			</path>
			<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/> 
		</target>
	
	<!-- PART 2: General properties definitions -->
		<property name="build.dir" value="build/healthProfile" />
		 <property name="src.dir" value="src" /> 
		<property name="lib.dir" value="lib" />
	    <property name="xjc.package" value="people.generated" />

		
	<!-- ================================= 
		          target: resolve downloads the dependencies to your lib folder              
		         ================================= -->
		<target name="resolve" depends="install-ivy" description="--> retrieve dependencies with ivy">
			<ivy:retrieve pattern="${lib.dir}/[artifact]-[type]-[revision].[ext]"/>
		</target>
	
	<!-- paths where ivy libraries will be downloaded, use them as classpathref in your compilation and running tasks  -->
	<path id="lib.path.id">
			<fileset dir="${lib.dir}" />
		</path>


		<path id="run.path.id">
			<path refid="lib.path.id" />
			<fileset dir="${build.dir}">
				<include name="*.class" />
				<include name="**/*.class" />
				<exclude name="**/*Test*" />
			</fileset>
		</path>
	
	<!-- PART 3: compilation and execution targets for this session -->
   <!-- <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>-->
	
	<target name="init" depends="install-ivy, resolve">
			<echo message="Init has been called" />
			<mkdir dir="${build.dir}" />
			<echo message="${build.dir} has been created" />
		</target>
	
	 <target name="generate" depends="init">
			<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="lib.path.id">
			</taskdef>
			<xjc schema="people.xsd" destdir="${src.dir}" package="${xjc.package}" />
		</target> 
	
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
	
	<target name="compile" depends="init, generate">
			<echo message="Compile target has been called" />
			<javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" includeAntRuntime="false">
			</javac>
			<copy todir="${build.dir}" overwrite="true">
				<fileset dir="${src.dir}">
					<include name="*.xml" />
				</fileset>
			</copy>
	</target>
	
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="getachew_abebe-assignment01.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target name="HealthProfileReader (4)">
        <java classname="healthProfile.HealthProfileReader" failonerror="true" fork="yes">
            <classpath refid="getachew_abebe-assignment01.classpath"/>
        </java>
    </target>
	
	<target name="execute.HPReader">
			<echo message="Executing Health Profile Reader: It will produce an XML file the in the home folder" />
			<java classname="healthProfile.HealthProfileReader" classpath="${build.dir}">
				<classpath>
					<fileset dir="${lib.dir}">
						<include name="**/*.jar" />
						<include name="*.jar" />
					</fileset>
				</classpath>
			</java>
		
	</target>
	<target name="execute.JAXBMarshaller">
				<echo message="Executing jaxbWork JAXBMarshaller: It will produce an XML file from a java object" />
				<java classname="jaxbClass.JAXBMarshaller" classpath="${build.dir}">
					<classpath>
						<fileset dir="${lib.dir}">
							<include name="**/*.jar" />
							<include name="*.jar" />
						</fileset>
					</classpath>
				</java>
	</target>
	<target name="execute.JAXBUnMarshaller">
				<echo message="Executing jaxbWork.JAXBUnMarshaller: It will converts to a java object of three people from an XML file"/>
				<java classname="jaxbClass.JAXBUnMarshaller" classpath="${build.dir}">
					<classpath>
						<fileset dir="${lib.dir}">
							<include name="**/*.jar" />
							<include name="*.jar" />
						</fileset>
					</classpath>
				</java>
	</target>
	<target name="execute.JAXBJson">
					<echo message="Executing jaxbWork.JAXBJson: It will produce a person.json file that converts java object to JSON"/>
					<java classname="jaxbClass.JAXBJson" classpath="${build.dir}">
						<classpath>
							<fileset dir="${lib.dir}">
								<include name="**/*.jar" />
								<include name="*.jar" />
							</fileset>
						</classpath>
					</java>
		</target>
	
	<target name="execute.evaluation" depends="execute.HPReader, execute.JAXBMarshaller, execute.JAXBUnMarshaller, execute.JAXBJson">
					<echo message="Executing Evaluation: produced all the outputs displayed above." />
					
	</target>
	
	</project>
